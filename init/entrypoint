#!/bin/bash

function die {
  echo "ERROR: ${1}"
  exit 1
}

function check_depending_env {
  if [ -n "${DEPENDING_ENVIRONMENT_VARS}" ]; then
    MISSING_ENVIRONMENT_VARS=()
    echo -n "* Checking depending environment variables "
    for e in ${DEPENDING_ENVIRONMENT_VARS}; do
      if [ ! -v "${e}" ]; then
        MISSING_ENVIRONMENT_VARS+=("${e}")
      fi
    done
    if [ ${#MISSING_ENVIRONMENT_VARS[@]} -gt 0 ]; then
      echo "[missing variables]"
      for missing in "${MISSING_ENVIRONMENT_VARS[@]}"; do
        echo " * ${missing}"
      done
      echo
      die "Missing environment variables"
    fi
    echo -n "[done]"
    echo
  fi
}

[[ ${DOCKER_DEBUG} ]] && set -x

# If the Dockerfile "USER" is sat, we cant do this trick
if [[ ${UID} == 0 ]]; then
  DUID=${DUID:-950}
  DGID=${DGID:-950}
  [[ $(id -u docker) == ${DUID} ]] || usermod -o -u ${DUID} docker
  [[ $(id -g docker) == ${DGID} ]] || groupmod -o -g ${DGID} docker
else
  if [[ ${DUID} || ${DGID} ]]; then
    echo "WARNING: You have sat DUID or DGID, but we are not able to change the userid because we are not UID 0 (root)."
    echo "DUID=${DUID}, DGID=${DGID}, we are $(id)"
    echo
  fi
fi

[[ -x "/hooks/entrypoint-pre" ]] && /hooks/entrypoint-pre
[[ -f "/init/setup" ]] && ( chmod +x /init/setup; /init/setup; )

case ${1} in
  run)
    check_depending_env
    [[ -x "/hooks/entrypoint-run" ]] && /hooks/entrypoint-run
    if [[ -e /init/supervisord && -d /etc/supervisord.d ]]; then
      # Use exec so we replace our current process so signals can get through
      exec /bin/sh /init/supervisord
    else
      /bin/bash
    fi
    ;;
  *)
    [[ -x "/hooks/entrypoint-exec" ]] && /hooks/entrypoint-exec
    exec $*
    ;;
esac
